array!stack value(v'ptr=)'stack array!json.value {
  --c--
  if (_this->v == 0) {
  _this->v = &g_empty;
  }
  sjs_array* arr = (sjs_array*)_this->v;
  arr->refcount++;
  --c--
  this
}

array_clone(offset'i32:, count'i32:, newsize'i32:)'stack array!json.value {
  newv'ptr = 0
  --c--
  sjs_array* arr = (sjs_array*)_parent->v;
  if (offset + count > arr->count) {
  halt("grow: offset %d count %d out of bounds %d\n", offset, count, arr->count);
  }
  if (count > arr->count - offset) {
  halt("grow: new count larger than old count %d:%d\n", count, arr->count - offset);
  }
  sjs_array* newArr = createarray(sizeof(sjs_json_value), newsize);
  if (!newArr) {
  halt("grow: out of memory\n");
  }
  newv = newArr;
  sjs_json_value* p = (sjs_json_value*)arr->data + offset;
  sjs_json_value* newp = (sjs_json_value*)newArr->data;
  newArr->size = newsize;
  newArr->count = count;
  #if false
  memcpy(newp, p, sizeof(sjs_json_value) * count);
  #else
  for (int i = 0; i < count; i++) {
  ;
  }
  #endif
  --c--
  array!stack value(this = array!stack value(
    v'ptr = v
  ))
}

array_each(cb'local (:stack value)void:)'void {
  for i : 0i to array_getcount(
      parent: this
    ) {
    cb(
      param0'stack value : param0
    )
  }
}

array_getat(index'i32:)'char {
  --c--
  sjs_array* arr = (sjs_array*)_parent->v;
  if (index >= arr->count || index < 0) {
  halt("getAt: out of bounds\n");
  }
  char* p = (char*)arr->data;
  return;;       
  --c--
}

array_getat(index'i32:)'stack value {
  --c--
  sjs_array* arr = (sjs_array*)_parent->v;
  if (index >= arr->count || index < 0) {
  halt("getAt: out of bounds\n");
  }
  sjs_json_value* p = (sjs_json_value*)arr->data;
  return;;       
  --c--
}

array_getcount()'i32 {
  --c--
  return;;
  --c--
}

array_getcount()'i32 {
  --c--
  return;;
  --c--
}

array_gettotalcount()'i32 {
  --c--
  return;;
  --c--
}

array_initat(index'i32:, item'stack value:)'void {
  --c--
  sjs_array* arr = (sjs_array*)_parent->v;
  if (index != arr->count) {
  halt("initAt: can only initialize last element\n");     
  }
  if (index >= arr->size || index < 0) {
  halt("initAt: out of bounds %d:%d\n", index, arr->size);
  }
  sjs_json_value* p = (sjs_json_value*)arr->data;
  ;
  arr->count = index + 1;
  --c--
}



halt(reason'stack string:)'void {
  --c--
  halt("%s\n", string_char(reason));
  --c--
}

hash![stack string, stack value]()'stack hash![string, json.value] {
  --cdefine--
  #ifndef string_value_hash_typedef
  #define string_value_hash_typedef
  KHASH_INIT_TYPEDEF(string_value_hash_type, sjs_string, sjs_json_value)
  #endif
  --cdefine--
  --cfunction--
  #ifndef string_value_hash_function
  #define string_value_hash_function
  #if true
  KHASH_INIT_FUNCTION_DEREF(string_value_hash_type, sjs_string, sjs_json_value, 1, INVALID, INVALID)
  #else
  KHASH_INIT_FUNCTION(string_value_hash_type, sjs_string, sjs_json_value, 1, INVALID, INVALID)
  #endif
  #endif
  --cfunction--
  --c--
  _this->_hash = kh_init(string_value_hash_type);
  --c--
  this
}

hash![type, bool]()'stack hash![type, bool] {
  --cdefine--
  #ifndef type_bool_hash_typedef
  #define type_bool_hash_typedef
  KHASH_INIT_TYPEDEF(type_bool_hash_type, int32_t, bool)
  #endif
  --cdefine--
  --cfunction--
  #ifndef type_bool_hash_function
  #define type_bool_hash_function
  #if false
  KHASH_INIT_FUNCTION_DEREF(type_bool_hash_type, int32_t, bool, 1, INVALID, INVALID)
  #else
  KHASH_INIT_FUNCTION(type_bool_hash_type, int32_t, bool, 1, INVALID, INVALID)
  #endif
  #endif
  --cfunction--
  --c--
  _this->_hash = kh_init(type_bool_hash_type);
  --c--
  this
}

hash_each(cb'local (:stack string, :stack value)void:)'void {
  --c--
  khash_t(string_value_hash_type)* p = (khash_t(string_value_hash_type)*)_parent->_hash;
  for (khiter_t k = kh_begin(p); k != kh_end(p); ++k) {
  if (kh_exist(p, k)) {
  cb._cb(
  cb._parent, 
  #if true
  &kh_key(p, k), 
  #else
  kh_key(p, k), 
  #endif
  #if true
  &kh_value(p, k)
  #else
  kh_value(p, k)
  #endif
  );
  }
  }
  --c--
}

hash_getat(key'stack string:)'stack value? {
  --c--
  khash_t(string_value_hash_type)* p = (khash_t(string_value_hash_type)*)_parent->_hash;
  #if true
  khiter_t k = kh_get(string_value_hash_type, p, *key);
  #else
  khiter_t k = kh_get(string_value_hash_type, p, key);
  #endif
  if (k == kh_end(p)) {
  return;
  }
  return;;
  --c--
}

hash_setat(key'stack string:, val'stack value:)'void {
  --c--
  khash_t(string_value_hash_type)* p = (khash_t(string_value_hash_type)*)_parent->_hash;
  #if true
  khiter_t k = kh_get(string_value_hash_type, p, *key);
  #else
  khiter_t k = kh_get(string_value_hash_type, p, key);
  #endif
  if (k != kh_end(p)) {            
  ;
  }
  int ret;
  #if true
  k = kh_put(string_value_hash_type, p, *key, &ret);
  #else
  k = kh_put(string_value_hash_type, p, key, &ret);
  #endif
  if (!ret) kh_del(string_value_hash_type, p, k);
  #if false
  delete_cb cb = { _parent, (void(*)(void*, void*))INVALID };
  weakptr_cb_add(key, cb);
  #else
  sjs_string t;
  ;
  #endif
  #if false
  delete_cb cb = { _parent, (void(*)(void*, void*))INVALID };
  weakptr_cb_add(val, cb);
  kh_val(p, k) = val;
  #else
  ;
  #endif
  --c--
}

list!stack value(arr'stack array!json.value=)'stack list!json.value {
  this
}

list_add(item'stack value:)'void {
  if array_getcount(
    parent: this
  ) == array_gettotalcount(
    parent: this
  ) {
    parent.arr'stack array!json.value = array_clone(
      parent: this,
      offset'i32 : offset,
      count'i32 : count,
      newsize'i32 : newsize
    )
    void
  }
  array_initat(
    parent: this,
    index'i32 : index,
    item'stack value : item
  )
}

log(minlevel'loglevel=, traceincludes'stack hash![type, bool]?=, debugincludes'stack hash![type, bool]?=, infoincludes'stack hash![type, bool]?=, warnincludes'stack hash![type, bool]?=, errorincludes'stack hash![type, bool]?=, fatalincludes'stack hash![type, bool]?=)'stack log {
  this
}

parse(s'stack string:)'stack value? {
  result'stack tuple2![i32, json.value] : parse_value(
    s'stack string : s,
    startindex'i32 : startindex
  )
  if result.item1 == s.count {
    value(result.item2)
  } else {
    empty'stack value?
  }
}

parse_number(s'stack string:, startindex'i32:)'stack tuple2![i32, string] {
  isescaped'bool = false
  index'i32 = startindex
  ismatched'bool = true
  while index < s.count && ismatched{
    ch'char : string_getat(
      parent: this,
      index'i32 : index
    )
    if ch >= '0' && ch <= '9' || ch == '.' || ch >= 'a' && ch <= 'z' {
      index'i32 = index + 1i
    } else {
      ismatched'bool = false
    }
  }
  tuple2![i32, stack string](this = tuple2![i32, stack string](
    item1'i32 : item1,
    item2'stack string : item2
  ))
}

parse_string(s'stack string:, startindex'i32:)'stack tuple2![i32, string] {
  isescaped'bool = false
  index'i32 = startindex + 1i
  ismatched'bool = false
  while index < s.count && !ismatched{
    ch'char : string_getat(
      parent: this,
      index'i32 : index
    )
    if !isescaped && ch == '\\' {
      isescaped'bool = true
    } else {
      if ch == '\"' {
        ismatched'bool = true
      }
      isescaped'bool = false
    }
    index'i32 = index + 1i
  }
  if ismatched {
    tuple2![i32, stack string](this = tuple2![i32, stack string](
      item1'i32 : item1,
      item2'stack string : item2
    ))
  } else {
    tuple2![i32, stack string](this = tuple2![i32, stack string](
      item1'i32 : item1,
      item2'stack string : item2
    ))
  }
}

parse_value(s'stack string:, startindex'i32:)'stack tuple2![i32, json.value] {
  index'i32 = parse_whitespace(
    s'stack string : s,
    startindex'i32 : startindex
  )
  switch string_getat(
    parent: this,
    index'i32 : index
  ) {
     == '{' {
        h'stack hash![string, json.value] : hash![stack string, stack value](this = hash![stack string, stack value]())
        index'i32 = index + 1i
        isfirst'bool = true
        shouldcontinue'bool = true
        while index < s.count && shouldcontinue{
          index'i32 = parse_whitespace(
            s'stack string : s,
            startindex'i32 : startindex
          )
          if isfirst {
            isfirst'bool = false
            if index < s.count && string_getat(
              parent: this,
              index'i32 : index
            ) == '}' {
              index'i32 = index + 1i
              shouldcontinue'bool = false
            }
          } else {
            if string_getat(
              parent: this,
              index'i32 : index
            ) == ',' {
              index'i32 = index + 1i
              index'i32 = parse_whitespace(
                s'stack string : s,
                startindex'i32 : startindex
              )
            } else {
              index'i32 = s.count + 1i
            }
          }
          if shouldcontinue {
            if index < s.count && string_getat(
              parent: this,
              index'i32 : index
            ) == '\"' {
              keyresult'stack tuple2![i32, string] : parse_string(
                s'stack string : s,
                startindex'i32 : startindex
              )
              index'i32 = keyresult.item1 + 1i
              key'stack string : if keyresult.item2.count > 0i {
                string_substr(
                  parent: this,
                  o'i32 : o,
                  c'i32 : c
                )
              } else {
                string(this = string(
                  offset'i32 = offset,
                  count'i32 = count,
                  data'stack array!char = data,
                  _isnullterminated'bool = _isnullterminated
                ))
              }
              index'i32 = parse_whitespace(
                s'stack string : s,
                startindex'i32 : startindex
              )
              if string_getat(
                parent: this,
                index'i32 : index
              ) == ':' {
                index'i32 = index + 1i
              } else {
                index'i32 = s.count + 1i
              }
              index'i32 = parse_whitespace(
                s'stack string : s,
                startindex'i32 : startindex
              )
              valueresult'stack tuple2![i32, json.value] : parse_value(
                s'stack string : s,
                startindex'i32 : startindex
              )
              index'i32 = valueresult.item1
              value'stack value : valueresult.item2
              hash_setat(
                parent: this,
                key'stack string : key,
                val'stack value : val
              )
              index'i32 = parse_whitespace(
                s'stack string : s,
                startindex'i32 : startindex
              )
              if index < s.count && string_getat(
                parent: this,
                index'i32 : index
              ) == '}' {
                index'i32 = index + 1i
                shouldcontinue'bool = false
              }
            } else {
              index'i32 = s.count + 1i
            }
          }
        }
        tuple2![i32, stack value](this = tuple2![i32, stack value](
          item1'i32 : item1,
          item2'stack value : item2
        ))
      }
     == '[' {
        l'stack list!json.value : list!stack value(this = list!stack value(
          arr'stack array!json.value = arr
        ))
        index'i32 = index + 1i
        isfirst'bool = true
        shouldcontinue'bool = true
        while index < s.count && shouldcontinue{
          index'i32 = parse_whitespace(
            s'stack string : s,
            startindex'i32 : startindex
          )
          if isfirst {
            isfirst'bool = false
            if index < s.count && string_getat(
              parent: this,
              index'i32 : index
            ) == ']' {
              index'i32 = index + 1i
              shouldcontinue'bool = false
            }
          } else {
            if string_getat(
              parent: this,
              index'i32 : index
            ) == ',' {
              index'i32 = index + 1i
            } else {
              index'i32 = s.count + 1i
            }
          }
          valueresult'stack tuple2![i32, json.value] : parse_value(
            s'stack string : s,
            startindex'i32 : startindex
          )
          index'i32 = valueresult.item1
          value'stack value : valueresult.item2
          list_add(
            parent: this,
            item'stack value : item
          )
          index'i32 = parse_whitespace(
            s'stack string : s,
            startindex'i32 : startindex
          )
          if index < s.count && string_getat(
            parent: this,
            index'i32 : index
          ) == ']' {
            index'i32 = index + 1i
            shouldcontinue'bool = false
          }
        }
        tuple2![i32, stack value](this = tuple2![i32, stack value](
          item1'i32 : item1,
          item2'stack value : item2
        ))
      }
     == '\"' {
        result'stack tuple2![i32, string] : parse_string(
          s'stack string : s,
          startindex'i32 : startindex
        )
        tuple2![i32, stack value](this = tuple2![i32, stack value](
          item1'i32 : item1,
          item2'stack value : item2
        ))
      }
    default {
        result'stack tuple2![i32, string] : parse_number(
          s'stack string : s,
          startindex'i32 : startindex
        )
        tuple2![i32, stack value](this = tuple2![i32, stack value](
          item1'i32 : item1,
          item2'stack value : item2
        ))
      }
  }
}

parse_whitespace(s'stack string:, startindex'i32:)'i32 {
  index'i32 = startindex
  ismatched'bool = true
  while index < s.count && ismatched{
    ch'char : string_getat(
      parent: this,
      index'i32 : index
    )
    if ch == '\r' || ch == '\n' || ch == '\t' || ch == ' ' {
      index'i32 = index + 1i
    } else {
      ismatched'bool = false
    }
  }
  index
}

string(offset'i32=, count'i32=, data'stack array!char=, _isnullterminated'bool=)'stack string {
  this
}

string_getat(index'i32:)'char {
  array_getat(
    parent: this,
    index'i32 : index
  )
}

string_substr(o'i32:, c'i32:)'stack string {
  if parent.offset + o + c > array_getcount(
    parent: this
  ) {
    halt(
      reason'stack string : reason
    )
  }
  string(this = string(
    offset'i32 = offset,
    count'i32 = count,
    data'stack array!char = data,
    _isnullterminated'bool = _isnullterminated
  ))
}

tuple2![i32, stack string](item1'i32:, item2'stack string:)'stack tuple2![i32, string] {
  this
}

tuple2![i32, stack value](item1'i32:, item2'stack value:)'stack tuple2![i32, json.value] {
  this
}

value(s'stack string?:, a'stack array!json.value?:, h'stack hash![string, json.value]?:)'stack value {
  this
}

value_getat(key'stack string:)'stack value? {
  ifValue  {
    hash_getat(
      parent: this,
      key'stack string : key
    )
  } elseEmpty {
    empty'stack value?
  }
}

writeline(data'stack string:)'void {
  --c--
  debugout("%s\n", string_char(data));
  --c--
}

global()'void {
  import  {
  }
  --cstruct--
  struct {
  int refcount;
  int size;
  int count;
  char data[0];
  } g_empty = { 1, 0, 0 };
  --cstruct--
  import  {
  }
  import  {
  }
  f32_pi'f32 : 3.14159265358979323846ff
  u32_maxvalue'u32 : (uint32_t)4294967295uu
  i32_maxvalue'i32 : -1i - 2147483647i
  i32_minvalue'i32 : 2147483647i
  {
    trace'loglevel : 0
    debug'loglevel : 1
    info'loglevel : 2
    warn'loglevel : 3
    error'loglevel : 4
    fatal'loglevel : 5
  }
  log_includeall'stack hash![type, bool]? : empty'stack hash![type, bool]?
  log_excludeall'stack hash![type, bool]? : value(hash![type, bool](this = hash![type, bool]()))
  log'stack log : log(this = log(
    minlevel'loglevel = minlevel,
    traceincludes'stack hash![type, bool]? = traceincludes,
    debugincludes'stack hash![type, bool]? = debugincludes,
    infoincludes'stack hash![type, bool]? = infoincludes,
    warnincludes'stack hash![type, bool]? = warnincludes,
    errorincludes'stack hash![type, bool]? = errorincludes,
    fatalincludes'stack hash![type, bool]? = fatalincludes
  ))
  --cdefine--
  char* string_char(sjs_string* str);
  --cdefine--
  --cfunction--
  char* string_char(sjs_string* str) {
  INVALID(str);
  return ((sjs_array*)str->data.v)->data + str->offset;
  }
  --cfunction--
  --c--
  ptr_init();
  weakptr_init();
  --c--
  clocks_per_sec'i32 = 0i
  --c--
  g_clocks_per_sec = CLOCKS_PER_SEC;
  --c--
  import  {
  }
  --cinclude--
  #include <lib/sj-lib-common/common.h>
  --cinclude--
  --cfunction--
  #include <lib/sj-lib-common/common.cpp>
  --cfunction--
  import  {
  }
  import  {
  }
  allthespaces'stack string : string(this = string(
    offset'i32 = offset,
    count'i32 = count,
    data'stack array!char = data,
    _isnullterminated'bool = _isnullterminated
  ))
  data'stack value? : parse(
    s'stack string : s
  )
  ifValue  {
    t'stack value : if isValid(if isValid(if isValid(value_getat(
      parent: this,
      key'stack string : key
    )) getValue(value_getat(
      parent: this,
      key'stack string : key
    )).a else empty'stack array!json.value?) value(array_getat(
      parent: this,
      index'i32 : index
    )) else empty'stack value?) getValue(if isValid(if isValid(value_getat(
      parent: this,
      key'stack string : key
    )) getValue(value_getat(
      parent: this,
      key'stack string : key
    )).a else empty'stack array!json.value?) value(array_getat(
      parent: this,
      index'i32 : index
    )) else empty'stack value?) else value(this = value(
      s'stack string? : s,
      a'stack array!json.value? : a,
      h'stack hash![string, json.value]? : h
    ))
    writeline(
      data'stack string : data
    )
    writeline(
      data'stack string : data
    )
    writeline(
      data'stack string : data
    )
    writeline(
      data'stack string : data
    )
    if isValid(data.h) hash_each(
      parent: this,
      cb'local (:stack string, :stack value)void : cb
    )
    if isValid(if isValid(value_getat(
      parent: this,
      key'stack string : key
    )) getValue(value_getat(
      parent: this,
      key'stack string : key
    )).a else empty'stack array!json.value?) array_each(
      parent: this,
      cb'local (:stack value)void : cb
    )
  }
  void
}

